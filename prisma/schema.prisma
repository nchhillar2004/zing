datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  ADMIN
  MOD
}

enum PremiumTier {
  NONE
  BASIC
  PRO
  ENTERPRISE
}

enum AccountType {
  PERSONAL
  NEWS
  POLITICS
  EDUCATION
  TECHNOLOGY
  ENTERTAINMENT
  ORGANIZATION
  OTHER
}

enum AccountPrivacy {
  PUBLIC
  PRIVATE
}

enum PostType {
  POST
  REPLY
  REPOST
}

enum PostPrivacy {
  PUBLIC
  PRIVATE
}

enum ModerationStatus {
  ACTIVE
  TIMED_OUT
  BANNED
}

model User {
  id                  String           @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  username            String           @unique
  email               String?
  password            String
  bio                 String?
  dob                 String?
  country             String
  profilePic          String           @default("https://github.com/evilrabbit.png")
  isVerified          Boolean          @default(false)
  isSpam              Boolean          @default(false)
  role                UserRole         @default(USER)
  premiumTier         PremiumTier      @default(NONE)
  accountPrivacy      AccountPrivacy   @default(PUBLIC)
  accountType         AccountType      @default(PERSONAL)
  moderationStatus    ModerationStatus @default(ACTIVE)
  moderationReason    String?
  moderationExpiresAt DateTime?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt

  time         String
  timezone     String
  geodata      String
  xp           Int     @default(0)
  referredById String? @db.ObjectId

  posts                Post[]
  likes                Like[]
  bookmarks            Bookmark[]
  follows              Follow[]        @relation("follower")
  followers            Follow[]        @relation("following")
  reports              Report[]        @relation("reporter")
  reportedReports      Report[]        @relation("reportedUser")
  moderationLogs       ModerationLog[] @relation("targetUser")
  performedModerations ModerationLog[] @relation("moderator")
  referredBy           User?           @relation("referrals", fields: [referredById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  referrals            User[]          @relation("referrals")
  interests            UserInterest[]
  votes                Vote[]

  @@index([moderationStatus])
}

model Tag {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  createdAt DateTime @default(now())

  posts PostTag[]
  users UserInterest[]
}

model PostTag {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  postId String @db.ObjectId
  tagId  String @db.ObjectId

  post Post @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tag  Tag  @relation(fields: [tagId], references: [id])

  @@unique([postId, tagId])
  @@index([postId])
  @@index([tagId])
}

model UserInterest {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  tagId  String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tag  Tag  @relation(fields: [tagId], references: [id])

  @@unique([userId, tagId])
  @@index([userId])
  @@index([tagId])
}

model Poll {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  postId            String    @unique @db.ObjectId
  option1           String
  option2           String
  option3           String?
  option4           String?
  pollLengthDays    Int?      @default(0)
  pollLengthHours   Int?      @default(0)
  pollLengthMinutes Int?      @default(0)
  pollLengthSlug    String?
  expiresAt         DateTime?
  voteCount         Int       @default(0)
  result            Int?

  createdAt DateTime @default(now())

  post  Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  votes Vote[]

  @@index([expiresAt])
}

model Vote {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  pollId      String   @db.ObjectId
  optionIndex Int
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  poll Poll @relation(fields: [pollId], references: [id], onDelete: Cascade)

  @@unique([userId, pollId])
  @@index([pollId])
  @@index([userId])
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  authorId  String   @db.ObjectId
  parentId  String?  @db.ObjectId
  images    String[] @default([])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  time      String?

  likeCount   Int         @default(0)
  replyCount  Int         @default(0)
  viewCount   Int         @default(0)
  postType    PostType    @default(POST)
  postPrivacy PostPrivacy @default(PUBLIC)

  author    User       @relation(fields: [authorId], references: [id])
  parent    Post?      @relation("replies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Post[]     @relation("replies")
  poll      Poll?
  likes     Like[]
  bookmarks Bookmark[]
  reports   Report[]   @relation("reportedPost")
  tags      PostTag[]

  @@index([authorId])
  @@index([parentId])
  @@index([createdAt(sort: Desc)])
}

model Follow {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  followerId  String   @db.ObjectId
  followingId String   @db.ObjectId
  createdAt   DateTime @default(now())
  time        String?

  follower  User @relation("follower", fields: [followerId], references: [id])
  following User @relation("following", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())
  time      String?

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

model Bookmark {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

model Report {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  reporterId     String   @db.ObjectId
  reportedUserId String?  @db.ObjectId
  reportedPostId String?  @db.ObjectId
  reason         String
  createdAt      DateTime @default(now())
  time           String?

  reporter     User  @relation("reporter", fields: [reporterId], references: [id])
  reportedUser User? @relation("reportedUser", fields: [reportedUserId], references: [id])
  reportedPost Post? @relation("reportedPost", fields: [reportedPostId], references: [id])

  @@index([reporterId])
  @@index([reportedUserId])
  @@index([reportedPostId])
}

model ModerationLog {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  moderatorId  String   @db.ObjectId
  targetUserId String   @db.ObjectId
  action       String
  reason       String
  duration     Int?
  createdAt    DateTime @default(now())
  time         String?

  moderator  User @relation("moderator", fields: [moderatorId], references: [id])
  targetUser User @relation("targetUser", fields: [targetUserId], references: [id])

  @@index([moderatorId])
  @@index([targetUserId])
  @@index([createdAt(sort: Desc)])
}

model ContactMessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
  time      String?
}
